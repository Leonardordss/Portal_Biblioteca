<template>
<div>
    <h1>Página Protegida</h1>
    <p v-if="isAuthenticated">Você precisa estar logado para acessar essa página</p>
    <p v-else>Bem vindo! Você está autenticado</p>
</div>
</template>

<script>
import {isAuthenticated} from '../auth';

export default {

computed: {

isAuthenticated() {

return is Authenticated();

},
},
};

</script>

<template>
  <div>
    <button @click="logoutUser">Sair</button>
  </div>
</template>

<script>
import {logout} from '../auth';

export default {
  methods: {
    logoutUser() {
      logout();
      this.$router.push('/login');
    },
  },
};

</script>

AVALIAR REGISTER

// Função para registrar novos usuários
exports.register = async (req, res) => {
  const { username, password } = req.body;
  try {
    // Criptografa a senha antes de salvar no banco
    const hashedPassword = await bcrypt.hash(password, 10);

    // Cria um novo usuário
    const newUser = new User({ username, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: 'Usuário registrado com sucesso' });
  } catch (error) {
    console.error(error); // Loga o erro
    res.status(500).json({ error: 'Erro ao registrar usuário' });
  }
};

Aqui, a senha está sendo criptografada com bcrypt.hash(). Isso significa que, ao fazer o login, você precisa comparar a senha informada com a senha criptografada no banco de dados.

AVALIAR LOGIN

// Função para fazer login de usuários
exports.login = async (req, res) => {
  const { username, password } = req.body;

  try {
    // Busca usuário pelo nome
    const user = await User.findOne({ username });
    if (!user) return res.status(400).json({ error: 'Usuário não encontrado' });

    // Compara a senha fornecida com a senha armazenada
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: 'Senha incorreta' });

    // Cria web token
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.json({ token });

  } catch (error) {
    console.error(error); // Loga o erro
    res.status(500).json({ error: 'Erro ao fazer login' });
  }
};

